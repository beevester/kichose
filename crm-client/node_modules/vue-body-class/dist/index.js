'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VueBodyClass = function () {
    function VueBodyClass(routes) {
        _classCallCheck(this, VueBodyClass);

        this.bodyClass = document.body.className;
        this.routes = routes;
    }

    _createClass(VueBodyClass, [{
        key: 'guard',
        value: function guard(to, next) {

            var parent = this.routes;
            var matched = this.parseMatched(to.matched);
            var additionalClassName = "";

            //is a home page?
            if (to.path == '/') {

                additionalClassName = this.updateClassFromRoute(additionalClassName, to);
            }
            //not homepage
            else if (matched.length > 0) {

                    for (var index in matched) {

                        var routes = parent.children ? parent.children : parent;
                        var found = this.findMatchInRoutesByPath(routes, matched[index]);

                        if (found) {

                            parent = found;
                            additionalClassName = this.updateClassFromRoute(additionalClassName, found);
                        }
                    }
                }

            document.body.className = (this.bodyClass + additionalClassName).trim();

            next();
        }
    }, {
        key: 'parseMatched',
        value: function parseMatched(matchedArray) {

            var matched = [];

            for (var index in matchedArray) {

                var prev = matched.join('/');

                matched.push(matchedArray[index].path.replace(/^\/|\/$/g, '').replace(prev, '').replace(/^\/|\/$/g, ''));
            }

            return matched;
        }
    }, {
        key: 'findMatchInRoutesByPath',
        value: function findMatchInRoutesByPath(routes, matchedItem) {

            return routes.find(function (o) {

                return o.path.replace(/^\/|\/$/g, '') == matchedItem;
            });
        }
    }, {
        key: 'getClassForRoute',
        value: function getClassForRoute(route) {

            return route.meta ? route.meta.bodyClass : null;
        }
    }, {
        key: 'updateClassFromRoute',
        value: function updateClassFromRoute(className, route) {

            var routeClass = this.getClassForRoute(route);

            if (routeClass) {

                var routeBodyClass = routeClass.replace(/^!/, '');

                if (routeClass.indexOf('!') === 0) {

                    className = " " + routeBodyClass;
                } else {

                    className += " " + routeBodyClass;
                }
            }

            return className;
        }
    }]);

    return VueBodyClass;
}();

exports.default = VueBodyClass;