<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'gesdinet.jwtrefreshtoken' shared service.

include_once \dirname(__DIR__, 4).'/vendor/gesdinet/jwt-refresh-token-bundle/Service/RefreshToken.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/EntryPoint/AuthenticationEntryPointInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/security-guard/AuthenticatorInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/security-guard/AbstractGuardAuthenticator.php';
include_once \dirname(__DIR__, 4).'/vendor/gesdinet/jwt-refresh-token-bundle/Security/Authenticator/RefreshTokenAuthenticator.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/User/UserProviderInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/gesdinet/jwt-refresh-token-bundle/Security/Provider/RefreshTokenProvider.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/User/UserCheckerInterface.php';
include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/User/UserChecker.php';

$a = ($this->services['gesdinet.jwtrefreshtoken.refresh_token_manager'] ?? $this->load('getGesdinet_Jwtrefreshtoken_RefreshTokenManagerService.php'));

$b = new \Gesdinet\JWTRefreshTokenBundle\Security\Provider\RefreshTokenProvider($a);
$b->setCustomUserProvider(($this->privates['security.user.provider.concrete.client_provider'] ?? $this->load('getSecurity_User_Provider_Concrete_ClientProviderService.php')));

return $this->services['gesdinet.jwtrefreshtoken'] = new \Gesdinet\JWTRefreshTokenBundle\Service\RefreshToken(new \Gesdinet\JWTRefreshTokenBundle\Security\Authenticator\RefreshTokenAuthenticator(($this->privates['security.user_checker'] ?? ($this->privates['security.user_checker'] = new \Symfony\Component\Security\Core\User\UserChecker())), 'refresh_token'), $b, ($this->privates['lexik_jwt_authentication.handler.authentication_success'] ?? $this->load('getLexikJwtAuthentication_Handler_AuthenticationSuccessService.php')), ($this->privates['lexik_jwt_authentication.handler.authentication_failure'] ?? $this->load('getLexikJwtAuthentication_Handler_AuthenticationFailureService.php')), $a, 28800, 'refresh', true, ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));
